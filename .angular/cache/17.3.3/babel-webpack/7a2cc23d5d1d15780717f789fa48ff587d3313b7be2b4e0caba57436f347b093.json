{"ast":null,"code":"import { HttpHeaders, HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { API_URL } from '../app.constants';\nimport { EncrDecrServiceService } from './encr-decr-service.service';\nimport * as MobileDetect from 'mobile-detect';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./encr-decr-service.service\";\nexport let BasicAuthenticationService = /*#__PURE__*/(() => {\n  class BasicAuthenticationService {\n    constructor(http, encrDecr) {\n      this.http = http;\n      this.encrDecr = encrDecr;\n      this.key = '123456$#@$^@1ERF';\n    }\n    excuteAuthenticationService(username, password) {\n      let basicAuthoriztion = 'Basic ' + window.btoa(username + ':' + password);\n      let headers = new HttpHeaders({\n        Authorization: basicAuthoriztion\n      });\n      try {\n        return this.http.get(`${API_URL}/basicAuth`, {\n          headers\n        }).pipe(map(data => {\n          sessionStorage.setItem('verifiedUser', username);\n          sessionStorage.setItem('token', basicAuthoriztion);\n          return data;\n        }, error => {\n          return this.http.get(\"Something Went Wrong! Please Contact Support.\");\n        }));\n      } catch (error) {\n        return this.http.get(\"Something Went Wrong! Please Contact Support.\");\n      }\n    }\n    excuteJWTAuthenticationService(username, password, email, phone, isRegister) {\n      password = this.encrDecr.testEncrypt(password);\n      return this.http.post(`${API_URL}/authenticate`, {\n        username,\n        password,\n        email,\n        phone,\n        isRegister\n      }).pipe(map(data => {\n        this.setAuthorizedUser(email);\n        sessionStorage.setItem('verifiedUser', email);\n        sessionStorage.setItem('token', `Bearer ${data.token}`);\n        this.getUserDetail();\n        return data;\n      }));\n    }\n    isUserLoggedIn() {\n      var user = sessionStorage.getItem('verifiedUser');\n      // if (this.getAuthorizedToken() === \"Bearer User Already Present\") {\n      // this.logout();\n      //return false;\n      // }\n      // else {\n      return !(user === null);\n      //}\n    }\n    getAuthorizedUser() {\n      return sessionStorage.getItem('verifiedUser');\n    }\n    setAuthorizedUser(username) {\n      return sessionStorage.setItem('verifiedUser', username);\n    }\n    getAuthorizedToken() {\n      //alert(sessionStorage.getItem('token'));\n      if (sessionStorage.getItem('token') === \"Bearer User Already Present\") {\n        return sessionStorage.getItem('token');\n      }\n      if (this.getAuthorizedUser != null && sessionStorage.getItem('token') != null) {\n        var token = sessionStorage.getItem('token').split(\"%id%\");\n        return token[0];\n      }\n    }\n    getUserID() {\n      //  if (!(sessionStorage.getItem('token') === \"Bearer User Already Present\")) {\n      //    var token = sessionStorage.getItem('token').split(\"%id%\");\n      //    sessionStorage.setItem('id',token[1]);\n      //    return token[1];\n      //  }\n      //  else {\n      //    return null;\n      //  }\n      return sessionStorage.getItem('id');\n    }\n    getUserDetail() {\n      if (this.getUserID() != null) {\n        this.getUser(this.getUserID()).subscribe(response => {\n          this.user = response;\n          sessionStorage.setItem('email', this.user.userEmail);\n          sessionStorage.setItem('phone', this.user.userPhoneNumber);\n          return this.user;\n        }, error => {\n          return null;\n        });\n      } else {\n        return null;\n      }\n    }\n    getEmail() {\n      return sessionStorage.getItem('email');\n    }\n    getPhone() {\n      return sessionStorage.getItem('phone');\n    }\n    getUserById() {\n      return this.user;\n    }\n    getUser(id) {\n      try {\n        return this.http.get(`${API_URL}/getUserById/${id}`);\n      } catch (error) {\n        return this.http.get(`Error`);\n      }\n    }\n    getAuthorizedTokenWithId() {\n      return sessionStorage.getItem('token');\n    }\n    logout() {\n      this.setAuthorizedUser(null);\n      sessionStorage.removeItem('verifiedUser');\n      sessionStorage.removeItem('token');\n      sessionStorage.removeItem('phone');\n      sessionStorage.removeItem('email');\n      sessionStorage.removeItem('id');\n      sessionStorage.removeItem('pic_type');\n    }\n    isAdmin() {\n      if (this.getUserID() == \"63de4647732cefaa102d9a48\") {\n        return true;\n      }\n      return false;\n    }\n    isPC() {\n      var userAgent = window.navigator.userAgent;\n      var md = new MobileDetect(userAgent);\n      return md.mobile() == null;\n    }\n    static #_ = this.ɵfac = function BasicAuthenticationService_Factory(t) {\n      return new (t || BasicAuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.EncrDecrServiceService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: BasicAuthenticationService,\n      factory: BasicAuthenticationService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return BasicAuthenticationService;\n})();\nexport class AuthenticationClass {\n  constructor(msg) {\n    this.msg = msg;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}